#!/usr/bin/env python3

import sys, json
import subprocess as sp

RESULTS_FILE=  "/tmp/results"
PARTIES_FILE = "/tmp/local_parties.json"

def check_args():
	if len(sys.argv) < 5:
		die()

def gen_parties():
	content = {
		"replicas": ["localhost" for _ in range(int(sys.argv[3]))],
		"clients": ["localhost" for _ in range(int(sys.argv[4]))],
	}

	with open(PARTIES_FILE, "w") as fh:
		json.dump(content, fh)

def gen_keys():
	print("Generating keys...", end = "", flush = True)
	n = int(sys.argv[3])
	p = sp.run(["mvn", "exec:java", f"-Dexec.args= -g {n}"], stdout = sp.DEVNULL, stderr = sp.STDOUT, cwd = "replica")
	p.check_returncode()
	print("Done")

def die():
	print(f"Usage: {sys.argv[0]} <batch> <protocol> <n> <nclients>")
	exit(1)

def run():
	batch = int(sys.argv[1])
	protocol = sys.argv[2]
	n = int(sys.argv[3])
	nclients = int(sys.argv[4])

	gen_keys()
	ps = []
	print("Starting replicas. Showing output for replica 0.")
	for i in range(n):
		mvn_cmd = f"-Dexec.args={batch} {protocol} {i} {n} {nclients} {PARTIES_FILE} {RESULTS_FILE}_{i}"
		cmd = ["mvn", "exec:java", mvn_cmd]
		if i == 0:
			p = sp.Popen(cmd, stderr = sp.STDOUT, cwd="replica")
		else:
			p = sp.Popen(cmd, stdout = sp.PIPE, stderr = sp.STDOUT, cwd="replica")

		ps.append(p)

	for p in ps:
		p.wait()

	print("Saving outputs to log files", flush = True, end = "")
	for i, p in enumerate(ps[1:]):
		with open(f"/tmp/log_{i}", "w") as fh:
			fh.write(str(p.stdout.read()))

		if p.returncode < 0:
			print("!", flush = True, end = "")
		else:
			print(".", flush = True, end = "")

	print("Done")


if __name__ == "__main__":
	check_args()
	gen_parties()
	run()
